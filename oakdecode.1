'\" t
'\"
'\"	DO NOT EDIT! This file is generated from oakdecode.1in
'\"
.TH oakdecode 1 "Sun Apr 25 16:22:30 2021" "oakdecode 0.0"
'\"
'\"==========================================================================
'\"	STRINGS and MACROS
'\"==========================================================================
'\"
'\"	Define strings for special characters that nroff doesn't have
'\"
'\"	N.B. using .if cua to test for special characters did not work.
'\"
.if !'\*[.T]'ps' .ds ua up
.if  '\*[.T]'ps' .ds ua \(ua
.if !'\*[.T]'ps' .ds da down
.if  '\*[.T]'ps' .ds da \(da
.if !'\*[.T]'ps' .ds <- left
.if  '\*[.T]'ps' .ds <- \(<-
.if !'\*[.T]'ps' .ds -> right
.if  '\*[.T]'ps' .ds -> \(->
'\"
'\"     bx - box a Courier string for making keycaps
'\"
'\"	N.B. this mess is to make the line drawing come out only
'\"	if we are really generating postscript
'\"
.de bx
.ie !'\*[.T]'ps' \{\
.	RB [ \\$1 ]\\$2
.\}
.el \{\
.	ie !r ps4html \{\
'\" \(br\|\s-1\f(CB\\$1\fP\s+1\|\(br\l'|0\(rn'\l'|0\(ul'
.		ft CW
.		nr par*bxw \w'\\$1'+.4m 
\Z'\v'.25m'\D'l 0 -1m'\D'l \\n[par*bxw]u 0'\D'l 0 1m'\D'l -\\n[par*bxw]u 0''\
\Z'\h'.2m'\s-1\\$1\s+1'\
\h'\\n[par*bxw]u'\\$2
.		ft P
.	\}
.	el \{\
.		RB [ \\$1 ]\\$2
.	\}
.\}
..
'\"
'\" strings to set current color (null with old groff)
'\"
.if mred .ds red \m[red]
.if mgreen .ds green \m[green]
.if mblue .ds blue \m[blue]
.if mblack .ds black \m[black]
.if mblack .ds mP \mP
'\"
'\" fix for grotty + xterm. We call for orange, grotty outputs yellow,
'\" but xterm displays yellow as orange.  The cycle is complete.
'\"
.if n .defcolor orange rgb #ffff00
'\"
'\" color <color> - set the current color (ignores request with old groff)
'\"
.de color
.if mred \m[\\$1]\c
..
'\"
'\" colorword <color> <word> - colorize a word (ignored by old groff)
'\"
.de colorword
.ie m\\$1 \m[\\$1]\\$2\mP\c
.el \\$2\c
..
'\"
'\" colbox <fg> <bg> <word> - colorize a word in a filled box
'\"
.de colbox
.ie mred \M[\\$2]\
\v'+.167v'\
\D'P 0 -0.9v  \w'\\$3'u 0  0 +0.9v   -\w'\\$3'u 0'\
\v'-.167v'\
\m[\\$1]\\$3\mP\MP
.el \\$3\c
..
'\"
'\"	Macros for doing pdfmarks
'\"
.de specialps
.if  '\*[.T]'ps' \\k_\X'ps: \\$*'\h'|\\n_u'\c
..
'\"
'\" pdfmark PDFMARKCODE
'\"
.ds pdfmarks
.if d pdfmarks \{\
.de pdfmark
.	specialps exec [\\$1 pdfmark
..
'\"
'\" pdfdest LINKNAME
'\"
.de pdfdest
.pdfmark "/Dest /\\$1 /View [/XYZ -5 PL null] /DEST"
..
'\"
'\" pdfbookmark COUNT LINKNAME STRING
'\"
.de pdfbookmark
.   pdfmark "/View [/XYZ 44 730 1.0] /Count \\$1 /Dest /\\$2 /Title (\\$3) /OUT"
..
'\"
'\"	Define the SH and SS macros to save pdfmark information
'\"	in "arrays" of numbers and strings.
'\"
.if !r rr_n \{\
.nr rr_n 0 1
.am SH
.	nr rr_levels!\\n+[rr_n] 2
.	ds rr_labels!\\n[rr_n] \\$*
.	pdfdest Link\\n[rr_n]
..
.am SS
.	nr rr_levels!\\n+[rr_n] 3
.	ds rr_labels!\\n[rr_n] \\$*
.	pdfdest Link\\n[rr_n]
..
.\}
'\"
'\"	Called at the end of the document to generate the pdfmark outline
'\"
.de pdf_outline
.nr rr_levels!\\n+[rr_n] 1
.nr rr_i 0 1
.while \\n+[rr_i]<\\n[rr_n] \{\
.   nr rr_ip1 \\n[rr_i]+1
.   nr rr_count 0
.   if \\n[rr_levels!\\n[rr_ip1]]>\\n[rr_levels!\\n[rr_i]] \{\
.       nr rr_j \\n[rr_i] 1
.       while \\n+[rr_j]<\\n[rr_n] \{\
.           if \\n[rr_levels!\\n[rr_j]]<=\\n[rr_levels!\\n[rr_i]] \{\
.               break
.           \}
.           if \\n[rr_levels!\\n[rr_j]]==(\\n[rr_levels!\\n[rr_i]]+1) \{\
.               nr rr_count \\n[rr_count]+1
.           \}
.       \}
.   \}
.   ds hhh \\*[rr_labels!\\n[rr_i]]
.   pdfbookmark -\\n[rr_count] Link\\n[rr_i] "\\*[hhh]"
.\}
..
'\"
'\" Some postscript to make pdfmarks harmless on old interpreters...
'\"
.specialps "def /pdfmark where {pop} {userdict /pdfmark /cleartomark load put} ifelse"
'\"
'\" Force display of Bookmarks in Acrobat when document is viewed.
'\"
.pdfmark "[/PageMode /UseOutlines /Page 1 /View [/XYZ null null null] /DOCVIEW"
'\"
'\" Output the document info in pdfmarks
'\"
.pdfmark "\
	/Title (\*[an-title](\*[an-section])) \
	/Subject (\*[an-title] Manual Page) \
	/Author (Rick Richardson) \
	/Keywords (printing) \
	/Creator (groff \n(.x.\n(.y.\n(.Y -man) \
	/CreationDate (\*[an-extra1]) \
	/ModDate (\*[an-extra1]) \
	/DOCINFO"
\}
'\"
'\" The manual page name is only 1st level mark
'\"
.nr rr_levels!\n+[rr_n] 1
.ds rr_labels!\n[rr_n] \*[an-title](\*[an-section])
.pdfdest Link\n[rr_n]
'\"
'\"==========================================================================
'\"	MANUAL PAGE SOURCE
'\"==========================================================================
.SH NAME
oakdecode \- Decode an OAKT printer stream into human readable form.
.SH SYNOPSIS
.B oakdecode
.RI [ options "] <" OAKT-file
.SH DESCRIPTION
.B oakdecode
decodes an OAKT printer stream into human readable form.
.P
An OAKT printer stream is the printer language used by the HP Color LaserJet
1500 and other printers.

.SH COMMAND LINE OPTIONS
These are the options that can appear on the command line.
.TP
.BI \-d\0 basename
Basename of .pbm file for saving decompressed planes.
.TP
.BI \-r\0 basename
Basename of .jbg file for saving raw planes
.TP
.BI \-i
Suppress display of image records.
.TP
.BI \-o
Print file offsets.
.TP
.BI \-D\0 level
Set Debug level [0].

.SH EXAMPLES
Decode an OAKT file created by foo2oak.

.nf
.ft CW
$ oakdecode < testpage.oak
0d (80) 1 OTHER
0c (64) Wed Nov 05 16:30:50 2003        a07d3   100005  32001e
0a (80) testpage.pdf
14 (16) (no args)
28 (16) Source=Tray1
29 (80) PaperType=0 UNK8=2,0,0,0, blanks(63)
2a (32) Copies=1        UNK=0
2b (32) papercode=25    xwid=4648       ywid=9000       UNK=0
33 (64)
        u0      u1      w       h       resx    resy    nBits
        x0      x0      2128    4300    600     600     x1
15 (16) (no args)
	bih0     w     h    l0     bih5   dlen  plen unk yOff P subP
3c (64) 00010000 2176  256  256 58030020  1050  1056 000   64 3 0
                DL = 0, D = 0, P = 1, - = 0, XY = 2176 x 256
                L0 = 256, MX = 32, MY = 0
                Order   = 3  ILEAVE SMID
                Options = 88  LRLTWO TPDON TPBON
                1 stripes, 0 layers, 1 planes
3c (64) 00010000 2176  256  256 58030020  3668  3680 000  320 3 0
3c (64) 00010000 2176  256  256 58030020  1463  1472 000  640 3 0
3c (64) 00010000 2176  256  256 58030020  1975  1984 000  896 3 0
3c (64) 00010000 2176  224  224 58030020  2744  2752 000 1152 3 0
3c (64) 00010000 2176  256  256 58030020   988   992 000 1440 3 0
3c (64) 00010000 2176  256  256 58030020  2892  2896 000 1696 3 0
3c (64) 00010000 2176  256  256 58030020  3634  3648 000 1952 3 0
3c (64) 00010000 2176  256  256 58030020  3236  3248 000 2208 3 0
3c (64) 00010000 2176  256  256 58030020  2279  2288 000 2464 3 0
3c (64) 00010000 2176  256  256 58030020  3746  3760 000 2720 3 0
3c (64) 00010000 2176  200  200 58030020  2404  2416 000 2976 3 0
3c (64) 00010000 2176  256  256 58030020  3114  3120 000 3240 3 0
3c (64) 00010000 2176   96   96 58030020  1142  1152 000 3496 3 0
3c (64) 00010000 2176  256  256 58030020  2094  2112 000 3752 3 0
3c (64) 00010000 2176  256  256 58030020  1319  1328 000 4008 3 0
3c (64) 00010000 2176   36   36 58030020   208   224 000 4264 3 0
17 (16) (no args)
18 (16) UNK=0
0b (16) (no args)
.ft P
.fi

.SH FILES
.BR /usr/bin/oakdecode
.SH SEE ALSO
.BR foo2oak-wrapper (1),
.BR foo2oak (1),
.BR jbg2pbm (1)
.SH "AUTHOR"
Rick Richardson <rick.richardson@comcast.net>
.br
http://foo2oak.rkkda.com/
'\"
'\"
'\"
.em pdf_outline
